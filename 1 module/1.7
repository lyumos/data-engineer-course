1
#include <iostream>

int main() {
    int x, y;

    std::cout<<"Input a: \n";
    std::cin>>x;

    std::cout<<"Input b: \n";
    std::cin>>y;

    if(x>y)
    {std::cout<<"a > b \n";}

    else if(x<y)
    {std::cout<<"a < b \n";}

    else
    {std::cout<<"a = b \n";}    

    return 0;
}

2
#include <iostream>

int main() {
    
    int basic_year=2024;
    int user_year;

    std::cout<<"Enter the year and find out if it is a leap year \n";
    std::cin>>user_year;

    int diff = abs((basic_year - user_year)%4);

    if(diff==0)
    {std::cout<<"Yes \n";}

    else
    {std::cout<<"No \n";}    

    return 0;
}

3
#include <iostream>
#include <math.h>

int main() {
    
    float a, b, c;

    std::cout<<"Quadratic equation looks like a*x^2 + b*x + c = 0 \n";
    std::cout<<"To solve the equation, enter the coefficients a, b and c  \n";

    std::cout<<"Enter the coefficient a \n";
    std::cin>>a;
    std::cout<<"Enter the coefficient b \n";
    std::cin>>b;
    std::cout<<"Enter the coefficient c \n";
    std::cin>>c;

    if(a==0)
    {
        float x = - (c/b);
        std::cout<<"Your equation is not quadratic \n";
        std::cout<<"The solution of your equation is ";
        std::cout<<x;

    }

    else
    {
        float d = b*b - 4*a*c;
        if (d<0)
        {
            std::cout<<"Your equation has not any solutions \n";
        }
        else if (d==0)
        {
            float x = (-b)/(2*a);
            std::cout<<"The solution of your equation is ";
            std::cout<<x;
        }
        else
        {
            float x_1 = ((-b)+sqrt(d))/(2*a);
            float x_2 = ((-b)-sqrt(d))/(2*a);
            std::cout<<"Your equation has two solutions: \n";
            std::cout<<"The first solution of your equation is ";
            std::cout<<x_1;
            std::cout<<" \n";
            std::cout<<"The second solution of your equation is ";
            std::cout<<x_2;
        }
    }    

    return 0;
}

4
#include <iostream>

int main() {
    
    int user_number;

    std::cout<<"Enter num \n";
    std::cin>>user_number;

    int res = (user_number)%2;

    if(res==0)
    {
        std::cout<<"Num is even \n";
    }

    else
    {
        std::cout<<"Num is odd \n";
    }    

    return 0;
}

5
#include <iostream>

int main()
{
    for (int i=1; i<11; i++)
    {
        std::cout<<i*i<<std::endl;
    }
}

6
#include <iostream>
#include <string>
using namespace std;

int main() {
    string line;
    cout << "input a numbers separated by space: ";
    getline(cin, line);

    int max=-1;
    int pos;
    while ((pos=line.find(" "))!=std::string::npos) {
        int n=stoi(line.substr(0,pos));
        if (n>max) {
            max=n;
        }

        line = line.substr(pos+1,line.length()-pos);
    }
    std::cout << "Max: " << max;
    return 0;
}

7
#include <iostream>
using namespace std;

int main() {

    float i;
    for (i=-4;i<=4;i+=0.5) {
        cout << i << ": " << -2*i*i-5*i - 8 << endl;
    }

    return 0;
}

8 
#include <iostream>
#include <ctime>
#include <cstdlib>
 
using namespace std;
 
const int  SIZE = 5;
 
void fillAndShowArray(int[][SIZE], const int size);
int findMinElement(int[][SIZE], const int size);
int findMaxElement(int[][SIZE], const int size);
 
int main()
{
	setlocale(LC_ALL, "rus");
 
	int matrix[SIZE][SIZE] = {};
 
	fillAndShowArray(matrix, SIZE); //заполняем и показываем массив
 
	cout << endl;
	cout << "Min: " << findMinElement(matrix, SIZE) << endl;
	cout << "Max: " << findMaxElement(matrix, SIZE) << endl;
 
	return 0;
}
 
void fillAndShowArray(int arr[][SIZE], const int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << "| ";
		for (int j = 0; j < size; j++)
		{
			arr[i][j] = 30 + rand() % 31;
 
			cout << arr[i][j] << " ";
		}
		cout << " |" << endl;
	}
}
 
int findMinElement(int arr[][SIZE], const int size)
{
	int min = arr[0][0];
	for (int i = 0; i < size; i++)
	{
		for (int j = 0; j < size; j++)
		{
			if (arr[i][j] < min)
				min = arr[i][j];
		}
	}
	return min;
}
 
int findMaxElement(int arr[][SIZE], const int  size)
{
	int max = arr[0][0];
	for (int i = 0; i < size; i++)
	{
		for (int j = 0; j < size; j++)
		{
			if (arr[i][j] > max)
				max = arr[i][j];
		}
	}
	return max;
}

9
#include <iostream>
#include <string>
#include <time.h>
#include <algorithm>
using namespace std;


struct student {
    string surname;
    int group_number;
    int rate[5];
};

float get_middle(int arr[5]) {
    int sum=0;
    int i;
    for (i=0;i<5;i++){
        sum+=arr[i];
    }
    return float(sum)/5;
}



int main() {
    student students[10];

    student stud1={"James E.",5,{5,2,2,5,3},};
    students[0]=stud1;

    student stud2={"Murphy J.",1,{5,4,5,5,4},};
    students[1]=stud2;

    student stud3={"Parker A.",1,{5,5,5,5,5},};
    students[2]=stud3;

    student stud4={"Powell P.",4,{4,4,4,4,5},};
    students[3]=stud4;

    student stud5={"Miller Y.",4,{2,2,5,3,2},};
    students[4]=stud5;

    student stud6={"Turner N.",5,{5,3,2,4,5},};
    students[5]=stud6;

    student stud7={"Williams H.",5,{3,4,5,5,3},};
    students[6]=stud7;

    student stud8={"Clarke N.",4,{2,4,5,5,4},};
    students[7]=stud8;

    student stud9={"Richards P.",3,{5,5,5,5,3},};
    students[8]=stud9;

    student stud10={"Ross A.",1,{4,4,4,5,5},};
    students[9]=stud10;

    student sorted[10];

    int i;

    int middles[10]={};

    cout << "Orig:" << endl;
    for (i=0;i<10;i++) {
        float middle=get_middle(students[i].rate);
        cout << "#" << i << " " << students[i].surname << ": " << middle << endl;
        middles[i]=i;
    }

    cout << "\nSorted:" << endl;

    int j;
    int l;
    for (l=0;l<8;l++) {
        for (j=0;j<9;j++) {
            if (get_middle(students[middles[j]].rate)>get_middle(students[middles[j+1]].rate)) {
                int temp_st_index=middles[j+1];
                middles[j+1]=middles[j];
                middles[j]=temp_st_index;
            }
        }
    }

    int k;
    for (k=0;k<10;k++) {
        float middle=get_middle(students[middles[k]].rate);
        cout << "#" << middles[k] << " " << students[middles[k]].surname << ": " << middle << endl;
        sorted[k]=students[middles[k]];
    }

    cout << "\nFiltered:" << endl;
    for (k=0;k<10;k++) {
        bool only45=true;
        for (l=0;l<5;l++) {
            if (sorted[k].rate[l]<4) {
                only45=false;
                break;
            }
        }
        if (only45) {
            float middle=get_middle(sorted[k].rate);
            cout << "#" << middles[k] << " " << sorted[k].surname << ": " << middle << endl;
        }
    }
}

10 
#include <iostream>
#include <string>
#include <time.h>
#include <algorithm>
using namespace std;

struct train_struct {
    string destination;
    int train_num;
    long time;
};

int main() {
    train_struct *trains = new train_struct[5];

    train_struct train0= {"Stavropol",703,9*60+25,};
    trains[0]=train0;
    train_struct train1={"Gelendzhik",265,19*60+30,};
    trains[1]=train1;
    train_struct train2={"Pyatigorsk",68,8*60+45,};
    trains[2]=train2;
    train_struct train3={"Kislovodsk",736,15*60+15,};
    trains[3]=train3;
    train_struct train4={"Pyatigorsk",68,17*60+30,};
    trains[4]=train4;

    cout << "Input train num: ";
    string train_n_s;
    getline(cin,train_n_s);
    int train_n=stoi(train_n_s);

    int i;
    bool found=false;
    for (i=0;i<5;i++) {
        if (trains[i].train_num==train_n) {
            found=true;
            cout << "Found train #" << train_n << " with destination " << trains[i].destination << ", " << trains[i].time/60 << ":" << trains[i].time%60 << endl;
            break;
        }
    }
    if (!found) {
        cout << "No train with num #" << train_n << endl;
    }


    int msorts[5];
    for (i=0;i<5;i++) {
        msorts[i]=i;
    }

    int j;
    for (j=0;j<4;j++) {
        for (i=0;i<4;i++) {
            bool cmp=trains[msorts[i]].destination>trains[msorts[i+1]].destination;
            if (cmp) {
                int tmppos;
                tmppos=msorts[i];
                msorts[i]=msorts[i+1];
                msorts[i+1]=tmppos;
            }else if (!cmp && trains[msorts[i]].train_num<trains[msorts[i+1]].train_num) {
                int tmppos;
                tmppos=msorts[i];
                msorts[i]=msorts[i+1];
                msorts[i+1]=tmppos;
            }
        }
    }

    cout << "Orig:" << endl;
    for (i=0;i<5;i++) {
        train_struct tr=trains[i];
        cout << "#" << tr.train_num << " to " << tr.destination << ", " << tr.time/60 << ":" << tr.time%60 << endl;
    }

    cout << "\nSorted:" << endl;
    for (i=0;i<5;i++) {
        train_struct tr=trains[msorts[i]];
        cout << "#" << tr.train_num << " to " << tr.destination << ", " << tr.time/60 << ":" << tr.time%60 << endl;
    }
}
